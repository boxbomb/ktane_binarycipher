using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEngine;
using KModkit;
using Rnd = UnityEngine.Random;
//sorry for bad coding   :(
public class BinaryCipherScript : MonoBehaviour
{
    public KMBombInfo Bomb;
    public KMAudio Audio;

    private static int ModuleIdCounter = 1;
    private int ModuleId;
    private bool ModuleSolved;
    public KMSelectable[] ArrowSels;
    public KMSelectable[] KeyboardSels;

    private int a;
    string[] answer = { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };
    private string answer5;
    string[] topletter = { "A", "B", "C" };
    private string selectletter;
    private string answer6;
    private string encry;
    string[] keyword = {
                "ABACUS", "ABDUCT", "ABJECT", "ABLAZE", "ABOARD", "ABOUND", "ABROAD", "ABRUPT", "ABSENT", "ABSORB", "ABSURD", "ABUSED", "ABUSER", "ABUSES", "ACACIA", "ACCEDE", "ACCENT", "ACCEPT", "ACCESS", "ACCORD", "ACCOST", "ACCRUE", "ACCUSE", "ACETIC", "ACHING", "ACIDIC", "ACQUIT", "ACROSS", "ACTING", "ACTION", "ACTIVE", "ACTORS", "ACTUAL", "ACUITY", "ACUMEN", "ADAGIO", "ADDICT", "ADDING", "ADHERE", "ADJOIN", "ADJUST", "ADMIRE", "ADMITS", "ADORED", "ADRIFT", "ADULTS", "ADVENT", "ADVERB", "ADVERT", "ADVICE", "ADVISE", "AERIAL", "AFFAIR", "AFFECT", "AFFINE", "AFFIRM", "AFFORD", "AFGHAN", "AFIELD", "AFLAME", "AFLOAT", "AFRAID", "AFRESH", "AFRICA", "AGENCY", "AGENDA", "AGENTS", "AGHAST", "AGREED", "AGREES", "AIMING", "AIRBAG", "AIRING", "ALASKA", "ALBEIT", "ALBINO", "ALBUMS", "ALCOVE", "ALIENS", "ALKALI", "ALLEGE", "ALLELE", "ALLIED", "ALLIES", "ALLOWS", "ALLUDE", "ALLURE", "ALMOND", "ALMOST", "ALPACA", "ALPINE", "ALUMNA", "ALUMNI", "ALWAYS", "AMAZED", "AMAZON", "AMBUSH", "AMENDS", "AMIDST", "AMOEBA", "AMORAL", "AMOUNT", "AMULET", "AMUSED", "ANALOG", "ANCHOR", "ANEMIA", "ANEMIC", "ANGELS", "ANGINA", "ANGLED", "ANGLER", "ANGLES", "ANGORA", "ANIMAL", "ANKLES", "ANKLET", "ANNUAL", "ANOINT", "ANORAK", "ANSWER", "ANTHEM", "ANTICS", "ANTLER", "ANYHOW", "ANYONE", "ANYWAY", "AORTIC", "APACHE", "APATHY", "APIECE", "APOGEE", "APPALL", "APPEAL", "APPEAR", "APPEND", "APPLES", "APPLET", "ARCADE", "ARCANA", "ARCANE", "ARCHED", "ARCHER", "ARCHES", "ARCHLY", "ARCTIC", "ARDENT", "ARGUED", "ARGUES", "ARISEN", "ARISES", "ARMADA", "ARMFUL", "ARMIES", "ARMING", "ARMORY", "ARMOUR", "ARMPIT", "AROUND", "AROUSE", "ARREST", "ARRIVE", "ARROWS", "ARTERY", "ARTFUL", "ARTIST", "ASCEND", "ASCENT", "ASHORE", "ASKING", "ASLEEP", "ASPECT", "ASPIRE", "ASSENT", "ASSERT", "ASSESS", "ASSETS", "ASSIGN", "ASSIST", "ASSUME", "ASSURE", "ASTHMA", "ASTRAL", "ASTRAY", "ASTUTE", "ASYLUM", "ATOMIC", "ATONAL", "ATRIUM", "ATTACH", "ATTACK", "ATTAIN", "ATTEND", "ATTEST", "ATTIRE", "ATTUNE", "AUGUST", "AUNTIE", "AUTHOR", "AUTISM", "AUTUMN", "AVATAR", "AVENGE", "AVENUE", "AVERSE", "AVIARY", "AVIDLY", "AVOIDS", "AVOWAL", "AVOWED", "AWAKEN", "AWARDS", "AWHILE", "AWNING", "AZALEA",
                "BABBLE", "BABIES", "BABOON", "BACKED", "BACKER", "BACKUP", "BADDIE", "BADGER", "BAFFLE", "BAGGED", "BAGGER", "BAGGIE", "BAITED", "BAKERY", "BAKING", "BALDLY", "BALLAD", "BALLET", "BALLOT", "BALSAM", "BAMBOO", "BANANA", "BANDED", "BANDIT", "BANGED", "BANGER", "BANISH", "BANKED", "BANKER", "BANNED", "BANNER", "BANTER", "BANZAI", "BAOBAB", "BARBED", "BARBER", "BARELY", "BARIUM", "BARKER", "BARLEY", "BARMAN", "BARNET", "BARONS", "BARRED", "BARREL", "BARREN", "BARTER", "BASALT", "BASICS", "BASINS", "BASKET", "BASQUE", "BASSET", "BATHER", "BATTEN", "BATTER", "BATTLE", "BAUBLE", "BAZAAR", "BEACON", "BEADED", "BEAGLE", "BEAKER", "BEAMED", "BEARER", "BEASTS", "BEATEN", "BEATER", "BEAUTY", "BEAVER", "BECAME", "BECKON", "BECOME", "BEDBUG", "BEDLAM", "BEDPAN", "BEEPER", "BEETLE", "BEFALL", "BEFORE", "BEGGAR", "BEGGED", "BEGINS", "BEHALF", "BEHAVE", "BEHEAD", "BEHEST", "BEHIND", "BEHOLD", "BEINGS", "BELIEF", "BELLOW", "BELONG", "BELTED", "BEMOAN", "BENIGN", "BERATE", "BEREFT", "BERLIN", "BESIDE", "BESTOW", "BETRAY", "BETTER", "BETTOR", "BEWARE", "BEYOND", "BIASED", "BICEPS", "BICKER", "BIDDER", "BIGGER", "BIGWIG", "BIKING", "BIKINI", "BILLOW", "BINARY", "BINDER", "BIOGAS", "BIONIC", "BIOPIC", "BIOPSY", "BIOTIC", "BIRDER", "BIRDIE", "BIRTHS", "BISECT", "BISHOP", "BISQUE", "BISTRO", "BITING", "BITTEN", "BITTER", "BLACKS", "BLADES", "BLAMED", "BLANCH", "BLASTS", "BLAZER", "BLEACH", "BLEARY", "BLIGHT", "BLITHE", "BLOCKS", "BLOCKY", "BLONDE", "BLOODY", "BLOTCH", "BLOUSE", "BLOWER", "BLUISH", "BLURRY", "BOARDS", "BOASTS", "BOBBLE", "BOBCAT", "BODEGA", "BODICE", "BODIES", "BODILY", "BOGGLE", "BOILED", "BOILER", "BOLDLY", "BOLERO", "BOLTED", "BOMBED", "BOMBER", "BONBON", "BONDED", "BONNET", "BONOBO", "BONSAI", "BOOGIE", "BOOKED", "BOOKIE", "BOOMER", "BOOTED", "BORDER", "BOREAL", "BORING", "BORROW", "BOSSES", "BOSTON", "BOTANY", "BOTHER", "BOTTLE", "BOTTOM", "BOUGHT", "BOUNCE", "BOUNCY", "BOUNDS", "BOUNTY", "BOVINE", "BOWING", "BOWLER", "BOWTIE", "BOXCAR", "BOXING", "BOYISH", "BRAINS", "BRAINY", "BRAISE", "BRAKES", "BRANCH", "BRANDS", "BRANDY", "BRASSY", "BRAWNY", "BRAZEN", "BRAZIL", "BREACH", "BREAKS", "BREAST", "BREATH", "BREECH", "BREEDS", "BREEZE", "BREEZY", "BRICKS", "BRIDAL", "BRIDGE", "BRIDLE", "BRIGHT", "BRINGS", "BROACH", "BROGUE", "BROKEN", "BROKER", "BRONZE", "BROOCH", "BROOKS", "BROWSE", "BRUISE", "BRUNCH", "BRUSHY", "BRUTAL", "BUBBLE", "BUBBLY", "BUCKET", "BUCKLE", "BUDGET", "BUFFED", "BUFFER", "BUFFET", "BUGGER", "BUILDS", "BULLET", "BUMBLE", "BUMMED", "BUMMER", "BUMPER", "BUNDLE", "BUNGEE", "BUNGLE", "BUNKER", "BURDEN", "BUREAU", "BURGER", "BURIAL", "BURIED", "BURLAP", "BURNED", "BURNER", "BURROW", "BURSTS", "BUSBOY", "BUSHEL", "BUSHES", "BUSILY", "BUSING", "BUSMAN", "BUSTED", "BUSTLE", "BUTANE", "BUTLER", "BUTTER", "BUTTON", "BUYERS", "BUYING", "BUYOUT", "BUZZER", "BYGONE", "BYPASS",
                "CABLES", "CACKLE", "CACTUS", "CAESAR", "CAIMAN", "CALICO", "CALLED", "CALLER", "CALLUS", "CALMLY", "CALVES", "CAMERA", "CAMPER", "CAMPUS", "CANADA", "CANALS", "CANARY", "CANCEL", "CANCER", "CANDID", "CANDLE", "CANDOR", "CANINE", "CANNED", "CANNON", "CANOLA", "CANOPY", "CANTER", "CANVAS", "CANYON", "CAPPED", "CAPTOR", "CARBON", "CAREEN", "CAREER", "CARERS", "CARESS", "CARING", "CARNAL", "CARPAL", "CARPET", "CARROT", "CARTEL", "CARTON", "CARVED", "CASEIN", "CASHEW", "CASING", "CASINO", "CASKET", "CASTER", "CASTLE", "CASUAL", "CATCHY", "CATION", "CATNAP", "CATNIP", "CATTLE", "CAUGHT", "CAUSAL", "CAUSED", "CAUSES", "CAVEAT", "CAVERN", "CAVIAR", "CAVING", "CAVITY", "CAVORT", "CEASED", "CELERY", "CELLAR", "CELTIC", "CEMENT", "CENSOR", "CENSUS", "CENTER", "CENTRE", "CEREAL", "CERVIX", "CESIUM", "CHAINS", "CHAIRS", "CHAISE", "CHAKRA", "CHALET", "CHALKY", "CHANCE", "CHANGE", "CHAPEL", "CHARGE", "CHARTS", "CHASER", "CHASTE", "CHATTY", "CHECKS", "CHEEKS", "CHEEKY", "CHEERS", "CHEERY", "CHEESE", "CHEESY", "CHEQUE", "CHERRY", "CHERUB", "CHEWED", "CHICKS", "CHIEFS", "CHILLY", "CHISEL", "CHIVES", "CHOICE", "CHOKED", "CHOKER", "CHOOSE", "CHOPPY", "CHORAL", "CHORDS", "CHORUS", "CHOSEN", "CHROME", "CHUBBY", "CHUNKS", "CHUNKY", "CHURCH", "CICADA", "CINDER", "CINEMA", "CIPHER", "CIRCLE", "CIRCUS", "CITIES", "CITING", "CITRUS", "CIVICS", "CLAIMS", "CLAMMY", "CLAMOR", "CLASSY", "CLAUSE", "CLAWED", "CLEAVE", "CLENCH", "CLERGY", "CLERIC", "CLERKS", "CLEVER", "CLICHE", "CLIENT", "CLIFFS", "CLIMAX", "CLINCH", "CLINGY", "CLINIC", "CLIQUE", "CLOCKS", "CLONED", "CLONES", "CLOSED", "CLOSER", "CLOSES", "CLOSET", "CLOTHE", "CLOUDS", "CLOUDY", "CLOVER", "CLUMPY", "CLUMSY", "CLUNKY", "CLUTCH", "COARSE", "COASTS", "COATED", "COBALT", "COBBLE", "COBWEB", "COCOON", "CODDLE", "CODIFY", "CODING", "COERCE", "COFFEE", "COFFER", "COFFIN", "COGNAC", "COHERE", "COHORT", "COILED", "COLDER", "COLDLY", "COLLAR", "COLONY", "COLORS", "COLUMN", "COMBAT", "COMEDY", "COMING", "COMMIT", "COMMON", "COMPEL", "COMPLY", "CONCUR", "CONDOR", "CONFER", "CONSUL", "CONVEX", "CONVEY", "CONVOY", "COOKED", "COOKER", "COOKIE", "COOLED", "COOLER", "COPIED", "COPIER", "COPIES", "COPING", "COPPER", "CORDED", "CORDON", "CORNEA", "CORNED", "CORNER", "CORNET", "CORONA", "CORPSE", "CORPUS", "CORRAL", "CORSET", "CORTEX", "COSMIC", "COSMOS", "COSTLY", "COTTON", "COUNTS", "COUNTY", "COUPLE", "COUPON", "COURSE", "COURTS", "COUSIN", "COVENT", "COVERS", "COVERT", "COWARD", "COWBOY", "COYOTE", "CRABBY", "CRACKS", "CRADLE", "CRAFTY", "CRANKY", "CRANNY", "CRATER", "CRAYON", "CRAZED", "CREAKY", "CREAMY", "CREASE", "CREATE", "CREDIT", "CREEPY", "CREOLE", "CRETIN", "CREWED", "CRIMES", "CRINGE", "CRISES", "CRISIS", "CRISPS", "CRISPY", "CRITIC", "CROCUS", "CROTCH", "CROUCH", "CROWDS", "CRUISE", "CRUMMY", "CRUNCH", "CRUSTY", "CRUTCH", "CRYING", "CUBISM", "CUBIST", "CUCKOO", "CUDDLE", "CUDDLY", "CUPPED", "CURATE", "CURDLE", "CURFEW", "CURLED", "CURLER", "CURSED", "CURSOR", "CURTLY", "CURTSY", "CURVED", "CURVES", "CUSTOM", "CUTESY", "CUTLET", "CUTTER", "CYBORG", "CYCLES", "CYCLIC", "CYMBAL", "CYSTIC",
                "DABBLE", "DAGGER", "DAIKON", "DAINTY", "DAMAGE", "DAMPEN", "DAMPER", "DAMSEL", "DANCED", "DANCER", "DANCES", "DANDER", "DANGER", "DANGLE", "DANISH", "DAPPER", "DAPPLE", "DARING", "DARKEN", "DARKER", "DARKLY", "DARNED", "DASHED", "DASHER", "DATING", "DAWDLE", "DAZZLE", "DEADEN", "DEADLY", "DEAFEN", "DEALER", "DEARLY", "DEATHS", "DEBASE", "DEBATE", "DEBRIS", "DEBTOR", "DEBUNK", "DECADE", "DECAMP", "DECANT", "DECEIT", "DECENT", "DECIDE", "DECODE", "DECREE", "DEDUCE", "DEDUCT", "DEEMED", "DEEPEN", "DEEPER", "DEEPLY", "DEFACE", "DEFAME", "DEFANG", "DEFEAT", "DEFECT", "DEFEND", "DEFILE", "DEFINE", "DEFORM", "DEFRAY", "DEFTLY", "DEFUSE", "DEGREE", "DELAYS", "DELETE", "DELUDE", "DELUGE", "DELUXE", "DEMAND", "DEMEAN", "DEMISE", "DEMONS", "DEMOTE", "DEMURE", "DENIAL", "DENIED", "DENIER", "DENIES", "DENOTE", "DENTAL", "DENTED", "DENUDE", "DEPART", "DEPEND", "DEPICT", "DEPLOY", "DEPORT", "DEPOSE", "DEPTHS", "DEPUTY", "DERAIL", "DERIDE", "DERIVE", "DERMAL", "DESERT", "DESIGN", "DESIRE", "DESIST", "DESPOT", "DETACH", "DETAIL", "DETAIN", "DETECT", "DETEST", "DETOUR", "DEVICE", "DEVILS", "DEVISE", "DEVOID", "DEVOTE", "DEVOUR", "DEVOUT", "DIADEM", "DIALOG", "DIAPER", "DIATOM", "DICTUM", "DIESEL", "DIFFER", "DIGEST", "DIGGER", "DIGITS", "DILATE", "DILUTE", "DIMMED", "DIMMER", "DIMPLE", "DINGHY", "DINING", "DINNER", "DIOXIN", "DIPOLE", "DIRECT", "DISARM", "DISBAR", "DISCUS", "DISHES", "DISMAL", "DISMAY", "DISOWN", "DISPEL", "DISUSE", "DITHER", "DIVERS", "DIVERT", "DIVEST", "DIVIDE", "DIVINE", "DIVING", "DOABLE", "DOCILE", "DOCKET", "DOCTOR", "DOGGIE", "DOINGS", "DOLLAR", "DOLLOP", "DOMAIN", "DOMINO", "DONATE", "DONKEY", "DONORS", "DOODAD", "DOODLE", "DOOMED", "DORSAL", "DOSAGE", "DOTING", "DOTTED", "DOUBLE", "DOUBLY", "DOUBTS", "DOUGHY", "DOVISH", "DOWNED", "DOWNER", "DOZENS", "DRAFTY", "DRAGON", "DRAINS", "DRAPED", "DRAWER", "DREAMS", "DREAMY", "DREARY", "DREDGE", "DRENCH", "DRESSY", "DRINKS", "DRIPPY", "DRIVEL", "DRIVEN", "DRIVER", "DRIVES", "DROOPY", "DROWSE", "DROWSY", "DRUDGE", "DRYING", "DUFFEL", "DUGOUT", "DULLED", "DUMBLY", "DUMPED", "DUPLEX", "DURESS", "DURIAN", "DURING", "DUSTER", "DUTIES", "DYEING", "DYNAMO",
                "EAGLES", "EARFUL", "EARNED", "EARNER", "EARTHY", "EASIER", "EASILY", "EASING", "EASTER", "EATERY", "EATING", "ECHOED", "ECHOES", "ECLAIR", "ECZEMA", "EDGING", "EDIBLE", "EDITED", "EDITOR", "EERILY", "EFFECT", "EFFIGY", "EFFORT", "EGGNOG", "EGOISM", "EGRESS", "EIGHTH", "EIGHTY", "EITHER", "ELAPSE", "ELATED", "ELBOWS", "ELDERS", "ELDEST", "ELEVEN", "ELICIT", "ELITES", "ELIXIR", "ELVISH", "EMBALM", "EMBARK", "EMBLEM", "EMBODY", "EMBOSS", "EMBRYO", "EMERGE", "EMPIRE", "EMPLOY", "ENABLE", "ENAMEL", "ENCASE", "ENCODE", "ENCORE", "ENDEAR", "ENDING", "ENDURE", "ENERGY", "ENFOLD", "ENGAGE", "ENGINE", "ENGULF", "ENIGMA", "ENJOIN", "ENJOYS", "ENLIST", "ENMITY", "ENOUGH", "ENRAGE", "ENRICH", "ENROLL", "ENSURE", "ENTAIL", "ENTERS", "ENTICE", "ENTIRE", "ENTITY", "ENTOMB", "ENTRAP", "ENTREE", "ENZYME", "EQUALS", "EQUATE", "EQUINE", "EQUITY", "ERASED", "ERASER", "ERODED", "ERRAND", "ERRANT", "ERRORS", "ERSATZ", "ESCAPE", "ESCHEW", "ESCORT", "ESSAYS", "ESTATE", "ESTEEM", "ETHICS", "ETHNIC", "EULOGY", "EUREKA", "EUROPE", "EVENLY", "EVENTS", "EVOLVE", "EXCEED", "EXCEPT", "EXCESS", "EXCISE", "EXCITE", "EXCUSE", "EXEMPT", "EXHALE", "EXHORT", "EXHUME", "EXILED", "EXISTS", "EXODUS", "EXOTIC", "EXPAND", "EXPECT", "EXPEND", "EXPERT", "EXPIRE", "EXPIRY", "EXPORT", "EXPOSE", "EXTANT", "EXTEND", "EXTENT", "EXTORT", "EXTRAS", "EYEFUL", "EYELID",
                "FABLED", "FABRIC", "FACADE", "FACETS", "FACIAL", "FACILE", "FACING", "FACTOR", "FADING", "FAILED", "FAIRLY", "FAKERY", "FAKING", "FALCON", "FALLEN", "FALTER", "FAMILY", "FAMINE", "FAMOUS", "FANDOM", "FARMED", "FARMER", "FASTEN", "FASTER", "FATHER", "FATHOM", "FATTEN", "FAUCET", "FAULTS", "FAULTY", "FAVOUR", "FEARED", "FEDORA", "FEEBLE", "FEEBLY", "FEEDER", "FEELER", "FEISTY", "FELINE", "FELLED", "FELLOW", "FELONY", "FEMALE", "FENCED", "FENCER", "FENCES", "FENDER", "FENNEL", "FERRET", "FESTER", "FETISH", "FETTER", "FEUDAL", "FIANCE", "FIASCO", "FIBRES", "FIBULA", "FICKLE", "FIDDLE", "FIDGET", "FIELDS", "FIERCE", "FIFTHS", "FIGHTS", "FIGURE", "FILIAL", "FILING", "FILLED", "FILLER", "FILLET", "FILMED", "FILTER", "FILTHY", "FINALE", "FINALS", "FINDER", "FINELY", "FINERY", "FINEST", "FINGER", "FINISH", "FINITE", "FIRING", "FIRMLY", "FISCAL", "FISHER", "FISTED", "FITTED", "FITTER", "FIXATE", "FIXING", "FIZZLE", "FLABBY", "FLAMES", "FLANKS", "FLARED", "FLASHY", "FLATLY", "FLAUNT", "FLAVOR", "FLAWED", "FLEECE", "FLESHY", "FLEXOR", "FLIGHT", "FLIMSY", "FLINCH", "FLIRTY", "FLOCKS", "FLOODS", "FLOORS", "FLOPPY", "FLORAL", "FLOWED", "FLOWER", "FLUENT", "FLUFFY", "FLUIDS", "FLURRY", "FLUTED", "FLYING", "FLYWAY", "FODDER", "FOETUS", "FOILED", "FOLDED", "FOLDER", "FOLLOW", "FONDLE", "FONDLY", "FONDUE", "FOODIE", "FOOTER", "FORAGE", "FORBID", "FORCED", "FORCES", "FOREGO", "FOREST", "FORGED", "FORGER", "FORGET", "FORGOT", "FORKED", "FORMAL", "FORMAT", "FORMED", "FORMER", "FOSSIL", "FOSTER", "FOUGHT", "FOULED", "FOURTH", "FOWLER", "FRAMED", "FRAMER", "FRAMES", "FRANCE", "FRANCO", "FRANCS", "FRAYED", "FREAKY", "FREELY", "FREEZE", "FRENCH", "FRENZY", "FRESCO", "FRIDAY", "FRIDGE", "FRIEND", "FRIGHT", "FRIGID", "FRILLY", "FRINGE", "FRISKY", "FRIZZY", "FROLIC", "FRONTS", "FROSTY", "FROTHY", "FROZEN", "FRUGAL", "FRUITS", "FRUITY", "FRYING", "FUELED", "FULFIL", "FULHAM", "FULLER", "FUMBLE", "FUNDED", "FUNDER", "FUNGAL", "FUNGUS", "FUNNEL", "FURROW", "FUSION", "FUTILE", "FUTURE",
                "GADFLY", "GADGET", "GAELIC", "GAFFER", "GAGGLE", "GAIETY", "GAINED", "GAINER", "GALAXY", "GALLEY", "GALLON", "GALLOP", "GALORE", "GAMBIT", "GAMBLE", "GAMELY", "GAMETE", "GAMING", "GANDER", "GANGLY", "GANTRY", "GAPING", "GARAGE", "GARBLE", "GARDEN", "GARGLE", "GARISH", "GARLIC", "GARNER", "GARNET", "GASKET", "GASPED", "GATHER", "GAZEBO", "GAZING", "GEARED", "GEEZER", "GEISHA", "GELATO", "GENDER", "GENEVA", "GENIAL", "GENIUS", "GENOME", "GENTLE", "GENTLY", "GENTRY", "GERBIL", "GERMAN", "GETTER", "GEYSER", "GHETTO", "GHOSTS", "GIANTS", "GIBLET", "GIFTED", "GIGGLE", "GILDED", "GINGER", "GIRDER", "GIRDLE", "GIRLIE", "GIVING", "GLADLY", "GLANCE", "GLANDS", "GLARED", "GLASSY", "GLAZED", "GLIDER", "GLITCH", "GLOBAL", "GLOOMY", "GLOSSY", "GLOVED", "GLOVES", "GLOWER", "GLUMLY", "GLUTEN", "GLYCOL", "GNARLY", "GOALIE", "GOATEE", "GOBBLE", "GOBLET", "GOBLIN", "GOGGLE", "GOLDEN", "GOLFER", "GOODLY", "GOPHER", "GOSPEL", "GOSSIP", "GOTHIC", "GOTTEN", "GOVERN", "GRADED", "GRADER", "GRADES", "GRAHAM", "GRAINS", "GRAINY", "GRANNY", "GRANTS", "GRAPES", "GRAPHS", "GRASSY", "GRATED", "GRATER", "GRAVEL", "GRAVEN", "GRAVES", "GRAZED", "GREASE", "GREASY", "GREECE", "GREEDY", "GREENS", "GRIEVE", "GRILLE", "GRIMLY", "GRINCH", "GRISLY", "GRITTY", "GROCER", "GROGGY", "GROOVE", "GROOVY", "GROTTO", "GROUCH", "GROUND", "GROUPS", "GROVEL", "GROWER", "GROWTH", "GRUBBY", "GRUDGE", "GRUMPY", "GRUNGE", "GRUNGY", "GUARDS", "GUESTS", "GUIDED", "GUIDES", "GUILTY", "GUINEA", "GUITAR", "GULLET", "GUNMAN", "GUNMEN", "GUNNER", "GURGLE", "GURNEY", "GUSHER", "GUTTED", "GUTTER", "GUZZLE", "GYPSUM", "GYRATE",
                "HABITS", "HACKER", "HADRON", "HAGGIS", "HAGGLE", "HAIRDO", "HALTED", "HALTER", "HALVED", "HALVES", "HAMLET", "HAMMER", "HAMPER", "HANDED", "HANDLE", "HANGAR", "HANGER", "HANKER", "HAPPEN", "HARASS", "HARBOR", "HARDEN", "HARDER", "HARDLY", "HARROW", "HASSLE", "HASTEN", "HATRED", "HAULED", "HAULER", "HAVING", "HAZARD", "HAZING", "HEADED", "HEADER", "HEALED", "HEALER", "HEALTH", "HEARER", "HEARSE", "HEARTH", "HEARTS", "HEARTY", "HEATED", "HEATER", "HEAVED", "HEAVEN", "HECKLE", "HECTIC", "HEDGES", "HEIGHT", "HELIUM", "HELMET", "HELPED", "HELPER", "HERALD", "HERBAL", "HERDER", "HEREBY", "HEREIN", "HERESY", "HERMIT", "HERNIA", "HEROES", "HEROIC", "HEYDAY", "HIATUS", "HICCUP", "HIDDEN", "HIDING", "HIGHER", "HIGHLY", "HIJACK", "HIKING", "HINDER", "HINGED", "HINGES", "HIPPIE", "HIRING", "HISSED", "HITHER", "HITMAN", "HITTER", "HOARSE", "HOBBIT", "HOBBLE", "HOBNOB", "HOCKEY", "HOLDER", "HOLDUP", "HOLLER", "HOLLOW", "HOMAGE", "HOMELY", "HOMING", "HONCHO", "HONEST", "HONOUR", "HOODED", "HOODIE", "HOOKED", "HOOKUP", "HOOPER", "HOOPLA", "HOORAY", "HOOVES", "HOPING", "HOPPER", "HORNED", "HORRID", "HORROR", "HORSES", "HORSEY", "HOSTEL", "HOTBED", "HOTDOG", "HOTELS", "HOTTIE", "HOUNDS", "HOURLY", "HOUSED", "HOUSES", "HOWLER", "HUBBUB", "HUBRIS", "HUDDLE", "HUGELY", "HUGGED", "HUGGER", "HUMANE", "HUMANS", "HUMBLE", "HUMBLY", "HUMBUG", "HUMMER", "HUMMUS", "HUMOUR", "HUMPED", "HUNGER", "HUNGRY", "HUNKER", "HUNTED", "HUNTER", "HURDLE", "HURRAH", "HUSHED", "HUSTLE", "HYBRID", "HYMNAL", "HYPHEN",
                "IAMBIC", "ICEBOX", "ICECAP", "ICICLE", "ICONIC", "IDEALS", "IDIOCY", "IDLING", "IGNITE", "IGNORE", "IGUANA", "IMAGES", "IMBIBE", "IMMUNE", "IMPACT", "IMPAIR", "IMPALE", "IMPART", "IMPEDE", "IMPISH", "IMPORT", "IMPOSE", "IMPROV", "IMPURE", "INCEST", "INCHES", "INCITE", "INCOME", "INDEED", "INDENT", "INDIAN", "INDICT", "INDIES", "INDIGO", "INDIUM", "INDOOR", "INDUCE", "INDUCT", "INFAMY", "INFANT", "INFECT", "INFEST", "INFILL", "INFIRM", "INFLOW", "INFLUX", "INFORM", "INFUSE", "INGEST", "INHALE", "INJECT", "INJURE", "INJURY", "INKPOT", "INLAND", "INMATE", "INNATE", "INNING", "INPUTS", "INSANE", "INSECT", "INSERT", "INSIDE", "INSIST", "INSTEP", "INSTIL", "INSULT", "INSURE", "INTACT", "INTAKE", "INTEND", "INTENT", "INTERN", "INTUIT", "INVADE", "INVENT", "INVERT", "INVEST", "INVITE", "INVOKE", "INWARD", "IODIDE", "IODINE", "IONIZE", "IRONED", "IRONIC", "ISLAND", "ISRAEL", "ISSUED", "ISSUER", "ISSUES", "ITSELF",
                "JABBER", "JACKAL", "JACKED", "JACKER", "JACKET", "JAGGED", "JAGUAR", "JAILED", "JAILER", "JAILOR", "JAMMED", "JAMMER", "JANGLE", "JANGLY", "JARGON", "JARRED", "JASPER", "JAZZED", "JERKED", "JERSEY", "JESTER", "JETLAG", "JETWAY", "JEWELS", "JEWISH", "JICAMA", "JIGGLE", "JIGSAW", "JINGLE", "JINGLY", "JINXED", "JINXES", "JIVING", "JOCKEY", "JOGGER", "JOINED", "JOINER", "JOINTS", "JOKERS", "JOKILY", "JOKING", "JOSTLE", "JOULES", "JOVIAL", "JOYFUL", "JOYOUS", "JUDGED", "JUDGER", "JUDGES", "JUGGLE", "JUICED", "JUICER", "JUICES", "JUMBLE", "JUMPED", "JUMPER", "JUNGLE", "JUNIOR", "JUNKER", "JUNKIE", "JURIED", "JURIES", "JURORS", "JUSTLY",
                "KABOOM", "KARATE", "KARMIC", "KAZOOS", "KEELED", "KEENLY", "KEEPER", "KELVIN", "KENNEL", "KERNEL", "KETTLE", "KEYPAD", "KHAKIS", "KIBBLE", "KICKED", "KICKER", "KIDDIE", "KIDNAP", "KIDNEY", "KILLED", "KILLER", "KIMONO", "KINDLE", "KINDLY", "KINGLY", "KIPPER", "KISSED", "KISSER", "KISSES", "KITSCH", "KITTEN", "KLAXON", "KNIGHT", "KNIVES", "KNOCKS", "KNOTTY", "KNOWER", "KOREAN", "KOSHER", "KRAKEN",
                "LABELS", "LABOUR", "LACKED", "LACKEY", "LACTIC", "LADDER", "LADDIE", "LADIES", "LAGGED", "LAGOON", "LAMBDA", "LAMELY", "LAMENT", "LANCER", "LANDED", "LAPDOG", "LAPSED", "LAPTOP", "LARDER", "LARGER", "LARVAE", "LASERS", "LASHES", "LASTED", "LASTLY", "LATELY", "LATENT", "LATEST", "LATHER", "LATTER", "LAUDED", "LAUGHS", "LAUNCH", "LAVISH", "LAWFUL", "LAWMAN", "LAWYER", "LAYERS", "LAYING", "LAYMAN", "LAYOFF", "LAYOUT", "LAZILY", "LAZULI", "LEADED", "LEADER", "LEAGUE", "LEAKED", "LEAKER", "LEANED", "LEAPER", "LEARNS", "LEARNT", "LEASED", "LEASES", "LEAVEN", "LEAVER", "LEAVES", "LECTOR", "LEDGER", "LEEWAY", "LEGACY", "LEGATE", "LEGATO", "LEGEND", "LEGGED", "LEGION", "LEGUME", "LEMONY", "LENDER", "LENGTH", "LENSES", "LESION", "LESSEN", "LESSER", "LESSON", "LETHAL", "LETTER", "LEVELS", "LEVITY", "LIABLE", "LIBIDO", "LICHEN", "LICKED", "LIDDED", "LIFTED", "LIFTER", "LIGHTS", "LIKELY", "LIKING", "LIMBER", "LIMBIC", "LIMITS", "LIMPLY", "LINEAR", "LINEUP", "LINGER", "LINING", "LINKED", "LIQUID", "LIQUOR", "LISTED", "LISTEN", "LITANY", "LITMUS", "LITRES", "LITTER", "LITTLE", "LIVELY", "LIVERY", "LIVING", "LIZARD", "LOADED", "LOADER", "LOAFER", "LOANED", "LOANER", "LOATHE", "LOCALE", "LOCALS", "LOCATE", "LOCKED", "LOCKER", "LOCKET", "LOCKUP", "LOCUST", "LODGED", "LODGER", "LOGGER", "LOITER", "LONDON", "LONELY", "LONGED", "LONGER", "LOOKED", "LOOKER", "LOOKUP", "LOOPED", "LOOSEN", "LOOTED", "LOOTER", "LORDLY", "LOSERS", "LOSING", "LOSSES", "LOTION", "LOUDER", "LOUDLY", "LOUNGE", "LOVELY", "LOVERS", "LOVING", "LOWEST", "LUGGED", "LUMBAR", "LUMBER", "LUNACY", "LUPINE", "LUSTER", "LUXURY", "LYCHEE", "LYRICS",
                "MADAME", "MADDEN", "MADMAN", "MAGGOT", "MAGNET", "MAGPIE", "MAIDEN", "MAILED", "MAILER", "MAIMED", "MAINLY", "MAKERS", "MAKEUP", "MAKING", "MALADY", "MALICE", "MALIGN", "MALLET", "MALTED", "MAMMAL", "MANAGE", "MANGER", "MANGLE", "MANIAC", "MANNED", "MANNER", "MANTIS", "MANTLE", "MANTRA", "MANUAL", "MANURE", "MARACA", "MARBLE", "MARCEL", "MARGIN", "MARINE", "MARKED", "MARKER", "MARKET", "MARKUP", "MARMOT", "MAROON", "MARROW", "MARSHY", "MARTIN", "MARTYR", "MARVEL", "MASCOT", "MASHED", "MASHER", "MASKED", "MASQUE", "MASSES", "MASSIF", "MASTER", "MATING", "MATRIX", "MATRON", "MATTED", "MATTER", "MATURE", "MAYDAY", "MAYFLY", "MAYHEM", "MEADOW", "MEAGER", "MEASLY", "MEDALS", "MEDDLE", "MEDIAN", "MEDIUM", "MEDLEY", "MEEKLY", "MELLOW", "MELODY", "MELTED", "MEMBER", "MEMOIR", "MEMORY", "MENACE", "MENIAL", "MENTAL", "MENTEE", "MENTOR", "MERELY", "MERGED", "MERGER", "MERITS", "MERLOT", "METALS", "METEOR", "METHOD", "METHYL", "METRES", "METRIC", "METTLE", "MEXICO", "MIASMA", "MICRON", "MIDDAY", "MIDDLE", "MIDGET", "MIDWAY", "MIGHTY", "MIGNON", "MILADY", "MILDEW", "MILDLY", "MILLED", "MILLER", "MIMOSA", "MINCED", "MINDED", "MINERS", "MINGLE", "MINING", "MINION", "MINNOW", "MINUET", "MINUTE", "MIRAGE", "MIRROR", "MISERY", "MISFIT", "MISHAP", "MISLED", "MISSED", "MISSES", "MISSUS", "MISTER", "MISUSE", "MITTEN", "MIXING", "MOANED", "MOBILE", "MODELS", "MODERN", "MODEST", "MODIFY", "MODULE", "MODULO", "MOLDED", "MOLDER", "MOLTEN", "MOMENT", "MONDAY", "MONGOL", "MONIES", "MONKEY", "MONTHS", "MORALE", "MORALS", "MORBID", "MORGAN", "MORGUE", "MORMON", "MORSEL", "MORTAL", "MORTAR", "MOSAIC", "MOSQUE", "MOSTLY", "MOTHER", "MOTIFS", "MOTION", "MOTIVE", "MOTLEY", "MOTORS", "MOUSSE", "MOUTHS", "MOVIES", "MOVING", "MUDDLE", "MUFFIN", "MUFFLE", "MUGGER", "MULLET", "MUMBLE", "MURDER", "MURMUR", "MURPHY", "MUSCLE", "MUSEUM", "MUSING", "MUSKET", "MUSTER", "MUTANT", "MUTATE", "MUTELY", "MUTINY", "MUTTER", "MUTTON", "MUTUAL", "MUZZLE", "MYOPIC", "MYRIAD", "MYSELF", "MYSTIC", "MYTHIC", "MYTHOS",
                "NAMELY", "NAMING", "NAPALM", "NAPKIN", "NARROW", "NATION", "NATIVE", "NATURE", "NAUGHT", "NAUSEA", "NEARBY", "NEARER", "NEARLY", "NEATLY", "NEBULA", "NECTAR", "NEEDED", "NEEDLE", "NEGATE", "NELSON", "NEPHEW", "NERVES", "NESTED", "NESTER", "NESTLE", "NETHER", "NETTLE", "NEURAL", "NEURON", "NEUTER", "NEWBIE", "NEWEST", "NEWISH", "NEWTON", "NIBBLE", "NICELY", "NICEST", "NICKEL", "NIGHTS", "NIMBLE", "NIMBLY", "NIMBUS", "NINETY", "NINJAS", "NIPPLE", "NITRIC", "NITWIT", "NOBLES", "NOBODY", "NODDED", "NODULE", "NOGGIN", "NOISES", "NOODLE", "NORDIC", "NORMAL", "NORMAN", "NOSIER", "NOSILY", "NOTARY", "NOTATE", "NOTICE", "NOTIFY", "NOTING", "NOTION", "NOUGHT", "NOVELS", "NOVICE", "NOZZLE", "NUANCE", "NUBILE", "NUCLEI", "NUDGER", "NUDGES", "NUDIST", "NUDITY", "NUGGET", "NUMBED", "NUMBER", "NUMBLY", "NURSED", "NURSES", "NUTMEG", "NUZZLE",
                "OBEYED", "OBJECT", "OBLIGE", "OBLONG", "OBOIST", "OBSESS", "OBTAIN", "OBTUSE", "OCCULT", "OCCUPY", "OCCURS", "OCEANS", "OCELOT", "OCTANE", "OCTAVE", "OCULAR", "OCULUS", "ODDITY", "OFFEND", "OFFERS", "OFFICE", "OFFSET", "OILMAN", "OLDEST", "OLIVES", "OMELET", "ONIONS", "ONLINE", "ONWARD", "OOZING", "OPAQUE", "OPENED", "OPENER", "OPENLY", "OPERAS", "OPIATE", "OPIOID", "OPPOSE", "OPTICS", "OPTING", "OPTION", "ORACLE", "ORALLY", "ORANGE", "ORATOR", "ORCHID", "ORDAIN", "ORDEAL", "ORDERS", "ORGANS", "ORIENT", "ORIGIN", "ORNATE", "ORPHAN", "OSMIUM", "OTHERS", "OUNCES", "OUSTED", "OUSTER", "OUTAGE", "OUTBID", "OUTCRY", "OUTDID", "OUTFIT", "OUTFOX", "OUTING", "OUTLAW", "OUTLET", "OUTPUT", "OUTRUN", "OUTSET", "OUTWIT", "OVERDO", "OVERLY", "OWLISH", "OWNERS", "OWNING", "OXFORD", "OXTAIL", "OXYGEN", "OYSTER",
                "PACIFY", "PACING", "PACKED", "PACKET", "PADDED", "PADDLE", "PAELLA", "PAGING", "PAGODA", "PAINED", "PAIRED", "PALACE", "PALATE", "PALLET", "PALLOR", "PALTRY", "PAMPER", "PANAMA", "PANDER", "PANELS", "PANTRY", "PAPACY", "PAPAYA", "PAPERS", "PAPERY", "PARADE", "PARCEL", "PARDON", "PARENT", "PARIAH", "PARING", "PARITY", "PARKED", "PARLAY", "PARLOR", "PARODY", "PAROLE", "PARROT", "PARSEC", "PARSON", "PARTED", "PARTLY", "PASSED", "PASSER", "PASSES", "PASTEL", "PASTOR", "PASTRY", "PATCHY", "PATENT", "PATHOS", "PATROL", "PATRON", "PATTED", "PATTEN", "PAUNCH", "PAUPER", "PAUSED", "PAVING", "PAYDAY", "PAYERS", "PAYING", "PAYOFF", "PAYOUT", "PEACHY", "PEAKED", "PEANUT", "PEARCE", "PEARLS", "PEARLY", "PEBBLE", "PECKER", "PECTIN", "PEDANT", "PEDDLE", "PEELED", "PEELER", "PEEPER", "PEERED", "PEEVED", "PELLET", "PELVIC", "PELVIS", "PENCIL", "PEOPLE", "PEPPER", "PEPTIC", "PERIOD", "PERISH", "PERMIT", "PERSON", "PERUSE", "PESTER", "PESTLE", "PETALS", "PETITE", "PETROL", "PEWTER", "PHARMA", "PHASED", "PHASES", "PHENOL", "PHLEGM", "PHOBIA", "PHOBIC", "PHONED", "PHONES", "PHONEY", "PHOTON", "PHOTOS", "PHRASE", "PICKED", "PICKER", "PICKET", "PICKLE", "PICKUP", "PICNIC", "PIDGIN", "PIECES", "PIERCE", "PIGEON", "PIGLET", "PIGPEN", "PIGSTY", "PILEUP", "PILFER", "PILLAR", "PILLOW", "PILOTS", "PIMPLE", "PINATA", "PINCER", "PINKIE", "PINNED", "PIPING", "PIRACY", "PIRATE", "PISSED", "PISTOL", "PITTED", "PIZAZZ", "PLACED", "PLACER", "PLACES", "PLACID", "PLAGUE", "PLAINS", "PLANAR", "PLANES", "PLANET", "PLANTS", "PLAQUE", "PLASMA", "PLATES", "PLAYED", "PLAYER", "PLEASE", "PLEDGE", "PLENTY", "PLEXUS", "PLIANT", "PLIERS", "PLIGHT", "PLOUGH", "PLOWED", "PLUNGE", "PLURAL", "POCKET", "PODIUM", "POETIC", "POETRY", "POINTS", "POINTY", "POISED", "POISON", "POLICE", "POLICY", "POLISH", "POLITE", "POLLEN", "POMMEL", "PONCHO", "PONDER", "PONIES", "POODLE", "POOLED", "POORER", "POORLY", "POPLAR", "POPPED", "POPPER", "POROUS", "PORTAL", "PORTER", "POSING", "POSSUM", "POSTAL", "POSTED", "POSTER", "POTATO", "POTENT", "POTION", "POTTED", "POTTER", "POUNCE", "POUNDS", "POURED", "POWDER", "POWERS", "PRAISE", "PRANCE", "PRAXIS", "PRAYED", "PRAYER", "PREACH", "PREFAB", "PREFER", "PREFIX", "PRESET", "PRESTO", "PRETTY", "PRICED", "PRICES", "PRICEY", "PRIEST", "PRIMAL", "PRIMED", "PRIMER", "PRIMLY", "PRINCE", "PRINTS", "PRIORY", "PRISON", "PRISSY", "PRIVET", "PRIZED", "PRIZES", "PROBES", "PROFIT", "PROMPT", "PROPEL", "PROPER", "PROTON", "PROVED", "PROVEN", "PROVES", "PRYING", "PSEUDO", "PSYCHE", "PSYCHO", "PUBLIC", "PUCKER", "PUDDLE", "PUEBLO", "PUFFED", "PUFFIN", "PULLED", "PULLER", "PULLEY", "PULPIT", "PULSAR", "PULSED", "PULSES", "PUMICE", "PUMMEL", "PUMPED", "PUMPER", "PUNDIT", "PUNISH", "PUPILS", "PUPPET", "PURELY", "PURIFY", "PURIST", "PURITY", "PURPLE", "PURSUE", "PUSHED", "PUSHER", "PUTRID", "PUTTER", "PUZZLE", "PYTHON",
                "QUACKS", "QUAILS", "QUAINT", "QUAKER", "QUALMS", "QUARKS", "QUARRY", "QUARTZ", "QUASAR", "QUAVER", "QUEASY", "QUEBEC", "QUEENS", "QUENCH", "QUEUED", "QUEUES", "QUICHE", "QUILLS", "QUINCE", "QUINOA", "QUIRKS", "QUIRKY", "QUIVER", "QUORUM", "QUOTAS", "QUOTED", "QUOTER", "QUOTES",
                "RABBIT", "RABBLE", "RABIES", "RACIAL", "RACING", "RACKET", "RADIAL", "RADIAN", "RADIOS", "RADISH", "RADIUM", "RADIUS", "RAFFLE", "RAFTER", "RAGGED", "RAGING", "RAGTAG", "RAISED", "RAISES", "RAISIN", "RAKING", "RAMBLE", "RANCID", "RANCOR", "RANDOM", "RANGED", "RANGES", "RANKED", "RANSOM", "RAPIER", "RAPPEL", "RAPPER", "RAPTOR", "RARELY", "RARITY", "RASCAL", "RASHES", "RATHER", "RATIFY", "RATING", "RATION", "RATIOS", "RATTLE", "RAVINE", "RAVING", "RAVISH", "READER", "REALLY", "REAPER", "REASON", "REBELS", "REBOOT", "REBORN", "REBUFF", "REBUKE", "RECALL", "RECANT", "RECAST", "RECEDE", "RECENT", "RECESS", "RECIPE", "RECITE", "RECKON", "RECODE", "RECOIL", "RECORD", "RECTAL", "RECTUM", "RECUSE", "REDDEN", "REDEEM", "REDIAL", "REDRAW", "REDUCE", "REFERS", "REFILL", "REFINE", "REFLEX", "REFLUX", "REFORM", "REFUEL", "REFUGE", "REFUND", "REFUSE", "REFUTE", "REGAIN", "REGALE", "REGARD", "REGENT", "REGGAE", "REGIME", "REGION", "REGRET", "REGROW", "REHASH", "REHEAT", "REJECT", "REJOIN", "RELATE", "RELENT", "RELICS", "RELIED", "RELIEF", "RELIES", "RELISH", "RELIVE", "RELOAD", "REMAIN", "REMAKE", "REMARK", "REMEDY", "REMIND", "REMISS", "REMOTE", "REMOVE", "RENAME", "RENDER", "RENEGE", "RENOWN", "RENTAL", "RENTED", "RENTER", "REOPEN", "REPAIR", "REPEAL", "REPEAT", "REPENT", "REPLAY", "REPORT", "REPOSE", "REPUTE", "REREAD", "RESCUE", "RESEAL", "RESENT", "RESIDE", "RESIGN", "RESIST", "RESIZE", "RESORT", "RESTED", "RESULT", "RESUME", "RETAIL", "RETAIN", "RETAKE", "RETEST", "RETINA", "RETIRE", "RETORT", "RETURN", "REVAMP", "REVEAL", "REVERB", "REVERE", "REVERT", "REVIEW", "REVILE", "REVISE", "REVIVE", "REVOKE", "REVOLT", "REWARD", "REWIND", "REWIRE", "REWORK", "RHESUS", "RHUMBA", "RHYTHM", "RIBALD", "RIBBED", "RIBBON", "RICHER", "RICHES", "RICHLY", "RIDDEN", "RIDDLE", "RIDERS", "RIDGED", "RIDGES", "RIDING", "RIFLES", "RIGGED", "RIGGER", "RIGHTS", "RIMMED", "RINGED", "RINGER", "RINSED", "RIOTER", "RIPPED", "RIPPER", "RIPPLE", "RISING", "RISQUE", "RITUAL", "RIVALS", "RIVERS", "ROADIE", "ROARED", "ROBBER", "ROBOTS", "ROBUST", "ROCKER", "ROCKET", "ROCOCO", "RODENT", "ROLLED", "ROLLER", "ROMANS", "ROOKIE", "ROOMIE", "ROOTED", "ROPING", "ROSARY", "ROSTER", "ROTARY", "ROTATE", "ROTTED", "ROTTEN", "ROTUND", "ROUNDS", "ROUTER", "ROUTES", "ROVERS", "ROVING", "ROWING", "RUBBED", "RUBBER", "RUBBLE", "RUBRIC", "RUCKUS", "RUDDER", "RUDELY", "RUDEST", "RUEFUL", "RUFFLE", "RUGGED", "RUINED", "RULERS", "RULING", "RUMBLE", "RUMOUR", "RUMPLE", "RUNNER", "RUNOFF", "RUNWAY", "RUSHED", "RUSHER", "RUSSIA", "RUSTED", "RUSTIC", "RUSTLE", "RUTTED",
                "SACKED", "SACRED", "SADDEN", "SADDLE", "SADISM", "SADIST", "SAFARI", "SAFELY", "SAFEST", "SAFETY", "SAGELY", "SAILED", "SAILOR", "SAINTS", "SALADS", "SALAMI", "SALARY", "SALINE", "SALIVA", "SALMON", "SALOON", "SALTED", "SALUTE", "SAMPLE", "SANDAL", "SANITY", "SAPPER", "SARONG", "SASHAY", "SATIRE", "SAUCER", "SAUTED", "SAVAGE", "SAVANT", "SAVING", "SAVIOR", "SAVORY", "SAWING", "SAYING", "SCALAR", "SCALED", "SCALES", "SCANTY", "SCARAB", "SCARCE", "SCARED", "SCENES", "SCENIC", "SCHEMA", "SCHEME", "SCHISM", "SCHOOL", "SCONCE", "SCORCH", "SCORED", "SCORER", "SCORES", "SCOTCH", "SCOUTS", "SCRAPE", "SCRAPS", "SCRAWL", "SCREAM", "SCREEN", "SCREWS", "SCREWY", "SCRIBE", "SCRIPT", "SCROLL", "SCRUFF", "SCULPT", "SCURRY", "SCURVY", "SCYTHE", "SEABED", "SEALED", "SEALER", "SEAMAN", "SEAMEN", "SEANCE", "SEARCH", "SEARED", "SEASON", "SEATED", "SECEDE", "SECOND", "SECRET", "SECTOR", "SECURE", "SEDATE", "SEDUCE", "SEEDED", "SEEING", "SEEKER", "SEEMED", "SEEMLY", "SEESAW", "SEETHE", "SEIZED", "SELDOM", "SELECT", "SELLER", "SENATE", "SENDER", "SENILE", "SENIOR", "SENSED", "SENSES", "SENSOR", "SENTRY", "SEPSIS", "SEPTAL", "SEPTET", "SEPTIC", "SEPTUM", "SEQUEL", "SEQUIN", "SERAPH", "SERENE", "SERIAL", "SERIES", "SERMON", "SERVED", "SERVER", "SERVES", "SESAME", "SETTEE", "SETTLE", "SEVENS", "SEVERE", "SEWAGE", "SEWING", "SEXTET", "SEXUAL", "SHABBY", "SHADED", "SHADES", "SHADOW", "SHAFTS", "SHAGGY", "SHAKEN", "SHAKER", "SHAMAN", "SHANTY", "SHAPED", "SHAPES", "SHARED", "SHARES", "SHAVED", "SHAVEN", "SHEARS", "SHEATH", "SHEETS", "SHEILA", "SHEKEL", "SHELLS", "SHELVE", "SHERRY", "SHIELD", "SHIFTS", "SHIFTY", "SHIMMY", "SHINER", "SHIRTS", "SHIVER", "SHOCKS", "SHODDY", "SHOGUN", "SHORES", "SHORTS", "SHOULD", "SHOUTS", "SHOVEL", "SHOWED", "SHOWER", "SHREWD", "SHRIEK", "SHRILL", "SHRIMP", "SHRINE", "SHRINK", "SHROUD", "SHRUBS", "SHTICK", "SHUCKS", "SICKEN", "SICKLE", "SICKLY", "SIDING", "SIENNA", "SIERRA", "SIESTA", "SIFTED", "SIFTER", "SIGHED", "SIGHTS", "SIGNAL", "SIGNED", "SIGNER", "SILENT", "SILKEN", "SILVER", "SIMIAN", "SIMILE", "SIMMER", "SIMPLE", "SIMPLY", "SINFUL", "SINGED", "SINGER", "SINGLE", "SINKER", "SINNER", "SIPHON", "SIPPED", "SISTER", "SITCOM", "SITTER", "SIZING", "SIZZLE", "SKATER", "SKETCH", "SKEWED", "SKEWER", "SKIING", "SKILLS", "SKIMPY", "SKINNY", "SKIRTS", "SKYBOX", "SLALOM", "SLATER", "SLAVES", "SLAYER", "SLEAZE", "SLEAZY", "SLEDGE", "SLEEPY", "SLEEVE", "SLEIGH", "SLEUTH", "SLICED", "SLICER", "SLICES", "SLIDER", "SLIDES", "SLIGHT", "SLINKY", "SLIVER", "SLOGAN", "SLOPED", "SLOPES", "SLOPPY", "SLOUCH", "SLOUGH", "SLOWED", "SLOWER", "SLOWLY", "SLUDGE", "SLURRY", "SLUSHY", "SMARMY", "SMARTS", "SMELLS", "SMELLY", "SMILED", "SMILES", "SMITHY", "SMOKED", "SMOKER", "SMOOCH", "SMOOTH", "SMUDGE", "SMUGLY", "SNAKES", "SNAPPY", "SNARKY", "SNATCH", "SNAZZY", "SNEAKY", "SNEEZE", "SNIPER", "SNIPPY", "SNITCH", "SNOBBY", "SNOOPY", "SNOOTY", "SNOOZE", "SNUGLY", "SOAKED", "SOAKER", "SOCCER", "SOCIAL", "SOCKET", "SODDEN", "SODIUM", "SODOMY", "SOFTEN", "SOFTER", "SOFTIE", "SOFTLY", "SOILED", "SOIREE", "SOLACE", "SOLDER", "SOLELY", "SOLEMN", "SOLIDS", "SOLVED", "SOLVER", "SOMBER", "SOMBRE", "SONATA", "SONNET", "SOONER", "SOOTHE", "SORBET", "SORDID", "SORELY", "SORROW", "SORTED", "SORTER", "SOUGHT", "SOUNDS", "SOURCE", "SOURED", "SOURLY", "SOVIET", "SOWING", "SPACER", "SPACES", "SPARED", "SPARSE", "SPEAKS", "SPEECH", "SPEEDO", "SPEEDS", "SPEEDY", "SPELLS", "SPENDS", "SPHERE", "SPICED", "SPIDER", "SPIGOT", "SPIKED", "SPINAL", "SPINES", "SPIRAL", "SPIRIT", "SPLASH", "SPLEEN", "SPLICE", "SPLINT", "SPOILS", "SPOKEN", "SPONGE", "SPONGY", "SPOOKY", "SPORTS", "SPORTY", "SPOTTY", "SPOUSE", "SPRAIN", "SPRANG", "SPRAWL", "SPREAD", "SPRING", "SPRINT", "SPRITE", "SPRITZ", "SPROUT", "SPRUCE", "SPUNKY", "SPYING", "SQUADS", "SQUALL", "SQUARE", "SQUASH", "SQUAWK", "SQUEAK", "SQUEAL", "SQUINT", "SQUIRE", "SQUIRM", "SQUIRT", "SQUISH", "STABLE", "STACKS", "STAGED", "STAGES", "STAIRS", "STAKES", "STALLS", "STAMEN", "STAMPS", "STANCE", "STANDS", "STANZA", "STAPLE", "STARCH", "STARED", "STARRY", "STARTS", "STARVE", "STASIS", "STATED", "STATES", "STATIC", "STATUE", "STATUS", "STAYED", "STEADY", "STEAMY", "STEELY", "STEERS", "STENCH", "STEREO", "STEWED", "STICKS", "STICKY", "STIFLE", "STIGMA", "STINGY", "STINKY", "STITCH", "STOCKS", "STOCKY", "STOLEN", "STOLID", "STONED", "STONES", "STOOGE", "STORED", "STORES", "STOREY", "STORMS", "STORMY", "STRAFE", "STRAIN", "STRAND", "STRAPS", "STRATA", "STREAK", "STREAM", "STREET", "STRESS", "STRICT", "STRIDE", "STRIFE", "STRIKE", "STRING", "STRIPE", "STRIPS", "STRIVE", "STROBE", "STRODE", "STROKE", "STROLL", "STRONG", "STRUCK", "STRUNG", "STUBBY", "STUCCO", "STUDIO", "STUFFY", "STUMPY", "STUPID", "STUPOR", "STURDY", "STYLES", "STYLUS", "STYMIE", "SUBDUE", "SUBMIT", "SUBSET", "SUBTLE", "SUBTLY", "SUBURB", "SUBWAY", "SUCCOR", "SUCKED", "SUCKER", "SUCKLE", "SUDDEN", "SUFFER", "SUFFIX", "SUGARY", "SUITED", "SUITOR", "SULFUR", "SULLEN", "SULTRY", "SUMMED", "SUMMER", "SUMMIT", "SUMMON", "SUNDAE", "SUNDAY", "SUNDER", "SUNDRY", "SUNKEN", "SUNLIT", "SUNSET", "SUNTAN", "SUPERB", "SUPINE", "SUPPER", "SUPPLE", "SUPPLY", "SURELY", "SURFER", "SURVEY", "SUTURE", "SWAMPY", "SWANKY", "SWATHE", "SWEATY", "SWEETS", "SWERVE", "SWITCH", "SWIVEL", "SWORDS", "SYMBOL", "SYNTAX", "SYRUPY", "SYSTEM",
                "TABLES", "TABLET", "TACKLE", "TACTIC", "TAGGED", "TAILOR", "TAKING", "TALBOT", "TALENT", "TALKED", "TALKER", "TALKIE", "TALLER", "TALLOW", "TAMALE", "TAMERS", "TAMING", "TAMPER", "TAMPON", "TANDEM", "TANGLE", "TANKER", "TANNED", "TAPING", "TAPPED", "TARGET", "TARIFF", "TARMAC", "TARRED", "TARTAN", "TARTAR", "TARTLY", "TASSEL", "TASTED", "TASTER", "TASTES", "TATTLE", "TATTOO", "TAUGHT", "TAVERN", "TAWDRY", "TAXING", "TEACUP", "TEAPOT", "TEASED", "TEASER", "TECHIE", "TECHNO", "TEDIUM", "TEENSY", "TEEPEE", "TEETER", "TELLER", "TEMPER", "TEMPLE", "TENANT", "TENDED", "TENDER", "TENDON", "TENNIS", "TENPIN", "TENSOR", "TENTHS", "TENURE", "TERMED", "TERROR", "TESTED", "TESTER", "TETHER", "TETRIS", "THANKS", "THATCH", "THAWED", "THEIRS", "THEISM", "THEMED", "THEMES", "THEORY", "THESES", "THESIS", "THIGHS", "THINGS", "THINGY", "THINKS", "THINLY", "THIRDS", "THIRST", "THIRTY", "THORAX", "THORNY", "THOUGH", "THRALL", "THRASH", "THREAD", "THREAT", "THRICE", "THRIFT", "THRILL", "THRIVE", "THROAT", "THROES", "THRONE", "THRONG", "THROWN", "THROWS", "THRUSH", "THRUST", "THUSLY", "THWACK", "THWART", "TICKER", "TICKET", "TICKLE", "TIDBIT", "TIDING", "TIERED", "TIGERS", "TIGHTS", "TILING", "TILTED", "TIMBER", "TIMBRE", "TIMELY", "TIMING", "TINDER", "TINGLE", "TINKER", "TINKLE", "TINNED", "TINSEL", "TINTED", "TIPPED", "TIPPET", "TIPTOE", "TIRADE", "TIRING", "TISSUE", "TITLED", "TITLES", "TITTER", "TOASTY", "TODDLE", "TOFFEE", "TOGGLE", "TOILET", "TOKENS", "TOMATO", "TOMBOY", "TOMCAT", "TONGUE", "TONNES", "TONSIL", "TOOLED", "TOOTHY", "TOPICS", "TOPPED", "TOPPER", "TOPPLE", "TORPID", "TORPOR", "TORQUE", "TORRID", "TOSSED", "TOUCAN", "TOUCHY", "TOUPEE", "TOUSLE", "TOWARD", "TOWELS", "TOWERS", "TOWING", "TOXICS", "TRACED", "TRACER", "TRACES", "TRACKS", "TRACTS", "TRADED", "TRADER", "TRADES", "TRAGIC", "TRAINS", "TRAITS", "TRANCE", "TRASHY", "TRAUMA", "TRAVEL", "TREATS", "TREATY", "TREBLE", "TREMOR", "TRENCH", "TRENDS", "TRENDY", "TRIAGE", "TRIALS", "TRIBAL", "TRIBES", "TRICKS", "TRICKY", "TRIFLE", "TRIPLE", "TRIPOD", "TRIPPY", "TRIVIA", "TROOPS", "TROPHY", "TROPIC", "TROUGH", "TROUPE", "TROWEL", "TRUANT", "TRUCKS", "TRUDGE", "TRUISM", "TRUSTS", "TRUSTY", "TRUTHS", "TRYING", "TRYOUT", "TUBING", "TUCKED", "TUCKER", "TUGGED", "TUMBLE", "TUMOUR", "TUMULT", "TUNDRA", "TUNING", "TUNNEL", "TURBAN", "TURBID", "TURGID", "TURKEY", "TURNED", "TURNIP", "TURRET", "TURTLE", "TUSSLE", "TUTORS", "TUXEDO", "TWELVE", "TWENTY", "TWINGE", "TWISTY", "TWITCH", "TYCOON", "TYPING", "TYPIST", "TYRANT",
                "ULCERS", "ULTIMA", "UMPIRE", "UNABLE", "UNBEND", "UNBIND", "UNBORN", "UNCLIP", "UNCLOG", "UNCOIL", "UNCORK", "UNCURL", "UNDEAD", "UNDONE", "UNEASE", "UNEASY", "UNEVEN", "UNFAIR", "UNFELT", "UNFOLD", "UNFURL", "UNHOLY", "UNHOOK", "UNHURT", "UNIONS", "UNIQUE", "UNISON", "UNITED", "UNJUST", "UNKIND", "UNLESS", "UNLIKE", "UNLOAD", "UNLOCK", "UNMASK", "UNPACK", "UNPAID", "UNPLUG", "UNREAD", "UNREAL", "UNREST", "UNRIPE", "UNROLL", "UNRULY", "UNSAFE", "UNSAID", "UNSEAL", "UNSEEN", "UNSOLD", "UNSUNG", "UNSURE", "UNTIDY", "UNTIED", "UNTOLD", "UNTRUE", "UNUSED", "UNVEIL", "UNWELL", "UNWIND", "UNWISE", "UNWORN", "UNWRAP", "UPBEAT", "UPDATE", "UPHELD", "UPHILL", "UPHOLD", "UPKEEP", "UPLIFT", "UPLINK", "UPLOAD", "UPROAR", "UPROOT", "UPSHOT", "UPSIDE", "UPTAKE", "UPTICK", "UPTIME", "UPTOWN", "UPWARD", "URCHIN", "URGENT", "URGING", "URINAL", "USABLE", "USEFUL", "UTERUS", "UTMOST", "UTOPIA",
                "VACANT", "VACATE", "VACUUM", "VAINLY", "VALLEY", "VALUED", "VALUES", "VALVES", "VANDAL", "VANISH", "VANITY", "VAPOUR", "VARIED", "VARIES", "VASTLY", "VAULTS", "VECTOR", "VEGGIE", "VEILED", "VEINED", "VELVET", "VENDOR", "VENTED", "VENUES", "VERBAL", "VERIFY", "VERMIN", "VERSED", "VERSES", "VERSUS", "VERTEX", "VESSEL", "VEXING", "VIABLE", "VICTIM", "VICTOR", "VIDEOS", "VIEWED", "VIEWER", "VIGOUR", "VIKING", "VILIFY", "VILLAS", "VIOLET", "VIOLIN", "VIRGIN", "VIRTUE", "VISAGE", "VISION", "VISITS", "VISUAL", "VOICED", "VOICES", "VOIDED", "VOLLEY", "VOLUME", "VOODOO", "VORTEX", "VOTERS", "VOTING", "VOWELS", "VOYAGE", "VOYEUR", "VULGAR",
                "WADDLE", "WADING", "WAFFLE", "WAGONS", "WAITED", "WAITER", "WAIVER", "WAKING", "WALKED", "WALKER", "WALLED", "WALLET", "WALNUT", "WALRUS", "WANDER", "WANING", "WANTED", "WANTON", "WARDEN", "WARDER", "WARILY", "WARMED", "WARMER", "WARMLY", "WARMTH", "WARNED", "WARPED", "WASABI", "WASHED", "WASHER", "WASTED", "WASTES", "WATERS", "WATERY", "WAVING", "WAXING", "WEAKEN", "WEAKER", "WEAKLY", "WEALTH", "WEANED", "WEAPON", "WEARER", "WEASEL", "WEBBED", "WEBCAM", "WEDDED", "WEEKLY", "WEENIE", "WEEVIL", "WEIGHT", "WEIRDO", "WELDED", "WELDER", "WETTER", "WHALES", "WHEELS", "WHEEZE", "WHEEZY", "WHILST", "WHIMSY", "WHINER", "WHINNY", "WHISKY", "WHITEN", "WHITES", "WHOLLY", "WICKED", "WIDELY", "WIDEST", "WIDGET", "WIDOWS", "WIENER", "WIGGLE", "WILDLY", "WILLOW", "WILTED", "WINDED", "WINDOW", "WINERY", "WINGED", "WINNER", "WINTER", "WINTRY", "WIPING", "WIRING", "WISDOM", "WISELY", "WISHED", "WISHES", "WITHER", "WITHIN", "WIZARD", "WOBBLE", "WOBBLY", "WOEFUL", "WOLVES", "WOMBAT", "WONDER", "WOODED", "WOODEN", "WOOING", "WOOLEN", "WOOLLY", "WORKED", "WORKER", "WORLDS", "WORSEN", "WORTHY", "WOUNDS", "WRAITH", "WREATH", "WRENCH", "WRETCH", "WRISTS", "WRITER", "WRITES", "WRITHE", "WYVERN",
                "XENONS", "XYLOSE",
                "YACHTS", "YEARLY", "YELLED", "YELLER", "YELLOW", "YIELDS", "YIPPEE", "YONDER", "YOUTHS", "YUPPIE",
                "ZAGGED", "ZAPPED", "ZAPPER", "ZEALOT", "ZEBRAS", "ZENITH", "ZEROES", "ZIGGED", "ZIGZAG", "ZINGER", "ZIPPED", "ZIPPER", "ZODIAC", "ZOMBIE", "ZONING", "ZOOMED", "ZYGOTE"
    };
    private int deletenum;
    private string selectkeyword;
    public TextMesh[] top;
    public TextMesh[] bottom;
    public TextMesh[] middle;
    public TextMesh[] stagetext;
    private string stage;
    private string deleteletter;
    private string resultkeyword;
    private string filltoletter;
    private string filltot1;
    private int p1;
    private int p2;
    private int p3;
    private int p4;
    private int p5;
    private int p6;
    private int p7;
    private int p8;
    private int p9;
    private int p10;
    private int p11;
    private int p12;
    private string binary16;
    private int b1;
    private int b2;
    private int b3;
    private int b4;
    private int b5;
    private int b6;
    private int b7;
    private int b8;
    private int b9;
    private int b10;
    private int b11;
    private int b12;
    private int b13;
    private int b14;
    private int b15;
    private int b16;
    private string keywordtext;
    private static readonly string[,] Tableletter = {
        {"","","","" },
        {"","","","" },
        {"","","","" },
        {"","","","" },
     };
    private static readonly int[,] t1 = {
        {0,0,0,0 },
        {0,0,0,0 },
        {0,0,0,0 },
        {0,0,0,0},
     };
    private static readonly int[,] t2 = {
        {0,0,0,0 },
        {0,0,0,0 },
        {0,0,0,0 },
        {0,0,0,0},
     };
    private static readonly int[,] t3 = {
        {0,0,0,0 },
        {0,0,0,0 },
        {0,0,0,0 },
        {0,0,0,0},
     };
    private static readonly string[,] t4 = {
        {"","","","" },
        {"","","","" },
        {"","","","" },
        {"","","","" },
     };
    private static readonly string[,] t5 = {
        {"","","","" },
        {"","","","" },
        {"","","","" },
        {"","","","" },
     };
    private int i = 1;
    private string alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

    void Awake()
    {
        ModuleId = ModuleIdCounter++;
        for (int i = 0; i < ArrowSels.Length; i++)
            ArrowSels[i].OnInteract += ArrowPress(i);
        for (int i = 0; i < KeyboardSels.Length; i++)
            KeyboardSels[i].OnInteract += KeyboardPress(i);

    }
    KMSelectable.OnInteractHandler ArrowPress(int btn)
    {
        return delegate ()
        {
            ArrowSels[btn].AddInteractionPunch(0.25f);
            Audio.PlayGameSoundAtTransform(KMSoundOverride.SoundEffect.ButtonPress, ArrowSels[btn].transform);
            if (ModuleSolved)
                return false;
            if (stagetext[0].text == "1")
            {
                top[0].text = selectletter;
                bottom[0].text = "";
                stage += 1;
                middle[0].text = string.Concat(b1.ToString(), b2.ToString(), b3.ToString(), b4.ToString(), b5.ToString(), b6.ToString(), b7.ToString(), b8.ToString(), b9.ToString(), b10.ToString(), b11.ToString(), b12.ToString(), b13.ToString(), b14.ToString(), b15.ToString(), b16.ToString());
                stagetext[0].text = "2";
            }
            else
            {
                bottom[0].text = keywordtext;
                top[0].text = encry;
                middle[0].text = "";
                stagetext[0].text = "1";

            }
            return false;
        };
    }
    private KMSelectable.OnInteractHandler KeyboardPress(int btn)
    {
        return delegate ()
        {
            KeyboardSels[btn].AddInteractionPunch(0.1f);
            Audio.PlayGameSoundAtTransform(KMSoundOverride.SoundEffect.ButtonPress, KeyboardSels[btn].transform);
            if (ModuleSolved)
                return false;
            var ix = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[btn].ToString();
            if (answer5 == ix)
            {
                ModuleSolved = true;
                Debug.LogFormat("[Binary Cipher #{0}] Correctly pressed {1}. Module solved.", ModuleId, ix);
                Audio.PlaySoundAtTransform("SolveSFX", transform);
                GetComponent<KMBombModule>().HandlePass();
            }
            else
                GetComponent<KMBombModule>().HandleStrike();
            return false;
        };
    }

    void Start()
    {
        stage = "1";
        stagetext[0].text = stage;
        answer5 = answer[Rnd.Range(0, answer.Length)];
        selectletter = topletter[Rnd.Range(0, topletter.Length)];
        selectkeyword = keyword[Rnd.Range(0, keyword.Length)];
        keywordtext = selectkeyword;
        deletenum = Rnd.Range(0, 1);
        bottom[0].text = keywordtext;
        b1 = Rnd.Range(0, 2);
        b2 = Rnd.Range(0, 2);
        b3 = Rnd.Range(0, 2);
        b4 = Rnd.Range(0, 2);
        b5 = Rnd.Range(0, 2);
        b6 = Rnd.Range(0, 2);
        b7 = Rnd.Range(0, 2);
        b8 = Rnd.Range(0, 2);
        b9 = Rnd.Range(0, 2);
        b10 = Rnd.Range(0, 2);
        b11 = Rnd.Range(0, 2);
        b12 = Rnd.Range(0, 2);
        b13 = Rnd.Range(0, 2);
        b14 = Rnd.Range(0, 2);
        b15 = Rnd.Range(0, 2);
        b16 = Rnd.Range(0, 2);

        resultkeyword = "";

        if (answer5 == "A")
        {
            answer6 = "00001";
        }
        else if (answer5 == "B")
        {
            answer6 = "00010";
        }
        else if (answer5 == "C")
        {
            answer6 = "00011";
        }
        else if (answer5 == "D")
        {
            answer6 = "00100";
        }
        else if (answer5 == "E")
        {
            answer6 = "00101";
        }
        else if (answer5 == "F")
        {
            answer6 = "00110";
        }
        else if (answer5 == "G")
        {
            answer6 = "00111";
        }
        else if (answer5 == "H")
        {
            answer6 = "01000";
        }
        else if (answer5 == "I")
        {
            answer6 = "01001";
        }
        else if (answer5 == "J")
        {
            answer6 = "01010";
        }
        else if (answer5 == "K")
        {
            answer6 = "01011";
        }
        else if (answer5 == "L")
        {
            answer6 = "01100";
        }
        else if (answer5 == "M")
        {
            answer6 = "01101";
        }
        else if (answer5 == "N")
        {
            answer6 = "01110";
        }
        else if (answer5 == "O")
        {
            answer6 = "01111";
        }
        else if (answer5 == "P")
        {
            answer6 = "10000";
        }
        else if (answer5 == "Q")
        {
            answer6 = "10001";
        }
        else if (answer5 == "R")
        {
            answer6 = "10010";
        }
        else if (answer5 == "S")
        {
            answer6 = "10011";
        }
        else if (answer5 == "T")
        {
            answer6 = "10100";
        }
        else if (answer5 == "U")
        {
            answer6 = "10101";
        }
        else if (answer5 == "V")
        {
            answer6 = "10110";
        }
        else if (answer5 == "W")
        {
            answer6 = "10111";
        }
        else if (answer5 == "X")
        {
            answer6 = "11000";
        }
        else if (answer5 == "Y")
        {
            answer6 = "11001";
        }
        else if (answer5 == "Z")
        {
            answer6 = "11010";
        }

        var answerBeforeInsert = answer6;
        answer6 = answer6.Insert(Bomb.GetBatteryCount() % 6, deletenum.ToString());
        var answerAfterInsert = answer6;
        var unique = new HashSet<char>(selectkeyword);
        foreach (char c in unique)
        {
            resultkeyword += c;
        }
        i = resultkeyword.Length;


        if (i == 6)
        {
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
        }
        else if (i == 5)
        {
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
        }
        else if (i == 4)
        {
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
        }
        else if (i == 3)
        {
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
        }
        else if (i == 2)
        {
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
        }
        else if (i == 1)
        {
            deleteletter = resultkeyword.Substring(0, 1);
            alphabet = alphabet.Replace(deleteletter, string.Empty);
            resultkeyword = resultkeyword.Remove(0, 1);
        }
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[0, 0] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[0, 1] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[0, 2] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[0, 3] = filltoletter;
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[1, 0] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[1, 1] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[1, 2] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[1, 3] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[2, 0] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[2, 1] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[2, 2] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[2, 3] = filltoletter;
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[3, 0] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[3, 1] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[3, 2] = filltoletter;
        alphabet = alphabet.Remove(0, 1);
        filltoletter = alphabet.Substring(0, 1);
        Tableletter[3, 3] = filltoletter;
        if (selectletter == "A")
        {
            if (Tableletter[1, 1] == "A" | Tableletter[1, 1] == "B" | Tableletter[1, 1] == "C" | Tableletter[1, 1] == "D" | Tableletter[1, 1] == "E" | Tableletter[1, 1] == "F" | Tableletter[1, 1] == "G" | Tableletter[1, 1] == "H" | Tableletter[1, 1] == "I" | Tableletter[1, 1] == "J" | Tableletter[1, 1] == "K" | Tableletter[1, 1] == "L" | Tableletter[1, 1] == "Z")
            {
                p1 = 0;
                p2 = 0;
                p3 = 0;
                p4 = 2;
                p5 = 0;
                p6 = 3;
                p7 = 1;
                p8 = 0;
                p9 = 1;
                p10 = 1;
                p11 = 3;
                p12 = 2;
            }
            else
            {
                p1 = 1;
                p2 = 2;
                p3 = 2;
                p4 = 0;
                p5 = 2;
                p6 = 2;
                p7 = 2;
                p8 = 3;
                p9 = 3;
                p10 = 0;
                p11 = 3;
                p12 = 1;
            }
        }
        else if (selectletter == "B")
        {
            if (Tableletter[1, 1] == "A" | Tableletter[1, 1] == "B" | Tableletter[1, 1] == "C" | Tableletter[1, 1] == "D" | Tableletter[1, 1] == "E" | Tableletter[1, 1] == "F" | Tableletter[1, 1] == "G" | Tableletter[1, 1] == "H" | Tableletter[1, 1] == "I" | Tableletter[1, 1] == "J" | Tableletter[1, 1] == "K" | Tableletter[1, 1] == "L" | Tableletter[1, 1] == "Z")
            {
                p1 = 0;
                p2 = 0;
                p3 = 0;
                p4 = 1;
                p5 = 0;
                p6 = 2;
                p7 = 1;
                p8 = 0;
                p9 = 2;
                p10 = 0;
                p11 = 3;
                p12 = 0;
            }
            else
            {
                p1 = 0;
                p2 = 0;
                p3 = 1;
                p4 = 0;
                p5 = 2;
                p6 = 0;
                p7 = 2;
                p8 = 1;
                p9 = 2;
                p10 = 2;
                p11 = 3;
                p12 = 0;
            }
        }
        else if (selectletter == "C")
        {
            if (Tableletter[1, 1] == "A" | Tableletter[1, 1] == "B" | Tableletter[1, 1] == "C" | Tableletter[1, 1] == "D" | Tableletter[1, 1] == "E" | Tableletter[1, 1] == "F" | Tableletter[1, 1] == "G" | Tableletter[1, 1] == "H" | Tableletter[1, 1] == "I" | Tableletter[1, 1] == "J" | Tableletter[1, 1] == "K" | Tableletter[1, 1] == "L" | Tableletter[1, 1] == "Z")
            {
                p1 = 0;
                p2 = 0;
                p3 = 0;
                p4 = 3;
                p5 = 1;
                p6 = 0;
                p7 = 1;
                p8 = 3;
                p9 = 2;
                p10 = 1;
                p11 = 3;
                p12 = 2;
            }
            else
            {
                p1 = 0;
                p2 = 1;
                p3 = 1;
                p4 = 2;
                p5 = 2;
                p6 = 0;
                p7 = 2;
                p8 = 3;
                p9 = 3;
                p10 = 0;
                p11 = 3;
                p12 = 3;
            }
        }
        t1[0, 0] = Bomb.GetBatteryCount() % 8 + 1;
        t1[0, 1] = (Bomb.GetBatteryCount() + 1) % 8 + 1;
        t1[0, 2] = (Bomb.GetBatteryCount() + 2) % 8 + 1;
        t1[0, 3] = (Bomb.GetBatteryCount() + 3) % 8 + 1;
        t1[1, 0] = (Bomb.GetBatteryCount() + 4) % 8 + 1;
        t1[1, 1] = (Bomb.GetBatteryCount() + 5) % 8 + 1;
        t1[1, 2] = (Bomb.GetBatteryCount() + 6) % 8 + 1;
        t1[1, 3] = (Bomb.GetBatteryCount() + 7) % 8 + 1;
        t1[2, 0] = Bomb.GetPortCount() % 8 + 1;
        t1[2, 1] = (Bomb.GetPortCount() + 1) % 8 + 1;
        t1[2, 2] = (Bomb.GetPortCount() + 2) % 8 + 1;
        t1[2, 3] = (Bomb.GetPortCount() + 3) % 8 + 1;
        t1[3, 0] = (Bomb.GetPortCount() + 4) % 8 + 1;
        t1[3, 1] = (Bomb.GetPortCount() + 5) % 8 + 1;
        t1[3, 2] = (Bomb.GetPortCount() + 6) % 8 + 1;
        t1[3, 3] = (Bomb.GetPortCount() + 7) % 8 + 1;
        a = Rnd.Range(0, 2);
        t5[0, 0] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[0, 1] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[0, 2] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[0, 3] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[1, 0] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[1, 1] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[1, 2] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[1, 3] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[2, 0] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[2, 1] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[2, 2] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[2, 3] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[3, 0] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[3, 1] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[3, 2] = a.ToString();
        a = Rnd.Range(0, 2);
        t5[3, 3] = a.ToString();


        filltot1 = answer6.Substring(0, 1);
        t5[p1, p2] = filltot1;
        answer6 = answer6.Remove(0, 1);
        filltot1 = answer6.Substring(0, 1);
        t5[p3, p4] = filltot1;
        answer6 = answer6.Remove(0, 1);
        filltot1 = answer6.Substring(0, 1);
        t5[p5, p6] = filltot1;
        answer6 = answer6.Remove(0, 1);
        filltot1 = answer6.Substring(0, 1);
        t5[p7, p8] = filltot1;
        answer6 = answer6.Remove(0, 1);
        filltot1 = answer6.Substring(0, 1);
        t5[p9, p10] = filltot1;
        answer6 = answer6.Remove(0, 1);
        filltot1 = answer6.Substring(0, 1);
        t5[p11, p12] = filltot1;
        answer6 = answer6.Remove(0, 1);

        t2[0, 0] = b1;

        t2[0, 1] = b2;

        t2[0, 2] = b3;

        t2[0, 3] = b4;

        t2[1, 0] = b5;

        t2[1, 1] = b6;

        t2[1, 2] = b7;

        t2[1, 3] = b8;

        t2[2, 0] = b9;

        t2[2, 1] = b10;

        t2[2, 2] = b11;

        t2[2, 3] = b12;

        t2[3, 0] = b13;

        t2[3, 1] = b14;

        t2[3, 2] = b15;

        t2[3, 3] = b16;
        if (t1[0, 0] % 2 == t2[0, 3] % 2)
        {
            t3[0, 0] = 1;
        }
        else
        {
            t3[0, 0] = 0;
        }
        if (t1[0, 1] % 2 == t2[0, 2] % 2)
        {
            t3[0, 1] = 1;
        }
        else
        {
            t3[0, 1] = 0;
        }
        if (t1[0, 2] % 2 == t2[0, 1] % 2)
        {
            t3[0, 2] = 1;
        }
        else
        {
            t3[0, 2] = 0;
        }
        if (t1[0, 3] % 2 == t2[0, 0] % 2)
        {
            t3[0, 3] = 1;
        }
        else
        {
            t3[0, 3] = 0;
        }
        if (t1[1, 0] % 2 == t2[1, 3] % 2)
        {
            t3[1, 0] = 1;
        }
        else
        {
            t3[1, 0] = 0;
        }
        if (t1[1, 1] % 2 == t2[1, 2] % 2)
        {
            t3[1, 1] = 1;
        }
        else
        {
            t3[1, 1] = 0;
        }
        if (t1[1, 2] % 2 == t2[1, 1] % 2)
        {
            t3[1, 2] = 1;
        }
        else
        {
            t3[1, 2] = 0;
        }
        if (t1[1, 3] % 2 == t2[1, 0] % 2)
        {
            t3[1, 3] = 1;
        }
        else
        {
            t3[1, 3] = 0;
        }
        if (t1[2, 0] % 2 == t2[2, 3] % 2)
        {
            t3[2, 0] = 1;
        }
        else
        {
            t3[2, 0] = 0;
        }
        if (t1[2, 1] % 2 == t2[2, 2] % 2)
        {
            t3[2, 1] = 1;
        }
        else
        {
            t3[2, 1] = 0;
        }
        if (t1[2, 2] % 2 == t2[2, 1] % 2)
        {
            t3[2, 2] = 1;
        }
        else
        {
            t3[2, 2] = 0;
        }
        if (t1[2, 3] % 2 == t2[2, 0] % 2)
        {
            t3[2, 3] = 1;
        }
        else
        {
            t3[2, 3] = 0;
        }
        if (t1[3, 0] % 2 == t2[3, 3] % 2)
        {
            t3[3, 0] = 1;
        }
        else
        {
            t3[3, 0] = 0;
        }
        if (t1[3, 1] % 2 == t2[3, 2] % 2)
        {
            t3[3, 1] = 1;
        }
        else
        {
            t3[3, 1] = 0;
        }
        if (t1[3, 2] % 2 == t2[3, 1] % 2)
        {
            t3[3, 2] = 1;
        }
        else
        {
            t3[3, 2] = 0;
        }
        if (t1[3, 3] % 2 == t2[3, 0] % 2)
        {
            t3[3, 3] = 1;
        }
        else
        {
            t3[3, 3] = 0;
        }

        if (t5[0, 0] == "1")
        {
            if (t3[0, 0] == 1)
            {
                t4[0, 3] = "1";
            }
            else
            {
                t4[0, 3] = "0";
            }
        }
        else
        {
            if (t3[0, 0] == 1)
            {
                t4[0, 3] = "0";
            }
            else
            {
                t4[0, 3] = "1";
            }
        }
        if (t5[0, 1] == "1")
        {
            if (t3[0, 1] == 1)
            {
                t4[0, 2] = "1";
            }
            else
            {
                t4[0, 2] = "0";
            }
        }
        else
        {
            if (t3[0, 1] == 1)
            {
                t4[0, 2] = "0";
            }
            else
            {
                t4[0, 2] = "1";
            }
        }
        if (t5[0, 2] == "1")
        {
            if (t3[0, 2] == 1)
            {
                t4[0, 1] = "1";
            }
            else
            {
                t4[0, 1] = "0";
            }
        }
        else
        {
            if (t3[0, 2] == 1)
            {
                t4[0, 1] = "0";
            }
            else
            {
                t4[0, 1] = "1";
            }
        }
        if (t5[0, 3] == "1")
        {
            if (t3[0, 3] == 1)
            {
                t4[0, 0] = "1";
            }
            else
            {
                t4[0, 0] = "0";
            }
        }
        else
        {
            if (t3[0, 3] == 1)
            {
                t4[0, 0] = "0";
            }
            else
            {
                t4[0, 0] = "1";
            }
        }
        if (t5[1, 0] == "1")
        {
            if (t3[1, 0] == 1)
            {
                t4[1, 3] = "1";
            }
            else
            {
                t4[1, 3] = "0";
            }
        }
        else
        {
            if (t3[1, 0] == 1)
            {
                t4[1, 3] = "0";
            }
            else
            {
                t4[1, 3] = "1";
            }
        }
        if (t5[1, 1] == "1")
        {
            if (t3[1, 1] == 1)
            {
                t4[1, 2] = "1";
            }
            else
            {
                t4[1, 2] = "0";
            }
        }
        else
        {
            if (t3[1, 1] == 1)
            {
                t4[1, 2] = "0";
            }
            else
            {
                t4[1, 2] = "1";
            }
        }
        if (t5[1, 2] == "1")
        {
            if (t3[1, 2] == 1)
            {
                t4[1, 1] = "1";
            }
            else
            {
                t4[1, 1] = "0";
            }
        }
        else
        {
            if (t3[1, 2] == 1)
            {
                t4[1, 1] = "0";
            }
            else
            {
                t4[1, 1] = "1";
            }
        }
        if (t5[1, 3] == "1")
        {
            if (t3[1, 3] == 1)
            {
                t4[1, 0] = "1";
            }
            else
            {
                t4[1, 0] = "0";
            }
        }
        else
        {
            if (t3[1, 3] == 1)
            {
                t4[1, 0] = "0";
            }
            else
            {
                t4[1, 0] = "1";
            }
        }
        if (t5[2, 0] == "1")
        {
            if (t3[2, 0] == 1)
            {
                t4[2, 3] = "1";
            }
            else
            {
                t4[2, 3] = "0";
            }
        }
        else
        {
            if (t3[2, 0] == 1)
            {
                t4[2, 3] = "0";
            }
            else
            {
                t4[2, 3] = "1";
            }
        }
        if (t5[2, 1] == "1")
        {
            if (t3[2, 1] == 1)
            {
                t4[2, 2] = "1";
            }
            else
            {
                t4[2, 2] = "0";
            }
        }
        else
        {
            if (t3[2, 1] == 1)
            {
                t4[2, 2] = "0";
            }
            else
            {
                t4[2, 2] = "1";
            }
        }
        if (t5[2, 2] == "1")
        {
            if (t3[2, 2] == 1)
            {
                t4[2, 1] = "1";
            }
            else
            {
                t4[2, 1] = "0";
            }
        }
        else
        {
            if (t3[2, 2] == 1)
            {
                t4[2, 1] = "0";
            }
            else
            {
                t4[2, 1] = "1";
            }
        }
        if (t5[2, 3] == "1")
        {
            if (t3[2, 3] == 1)
            {
                t4[2, 0] = "1";
            }
            else
            {
                t4[2, 0] = "0";
            }
        }
        else
        {
            if (t3[2, 3] == 1)
            {
                t4[2, 0] = "0";
            }
            else
            {
                t4[2, 0] = "1";
            }
        }
        if (t5[3, 0] == "1")
        {
            if (t3[3, 0] == 1)
            {
                t4[3, 3] = "1";
            }
            else
            {
                t4[3, 3] = "0";
            }
        }
        else
        {
            if (t3[3, 0] == 1)
            {
                t4[3, 3] = "0";
            }
            else
            {
                t4[3, 3] = "1";
            }
        }
        if (t5[3, 1] == "1")
        {
            if (t3[3, 1] == 1)
            {
                t4[3, 2] = "1";
            }
            else
            {
                t4[3, 2] = "0";
            }
        }
        else
        {
            if (t3[3, 1] == 1)
            {
                t4[3, 2] = "0";
            }
            else
            {
                t4[3, 2] = "1";
            }
        }
        if (t5[3, 2] == "1")
        {
            if (t3[3, 2] == 1)
            {
                t4[3, 1] = "1";
            }
            else
            {
                t4[3, 1] = "0";
            }
        }
        else
        {
            if (t3[3, 2] == 1)
            {
                t4[3, 1] = "0";
            }
            else
            {
                t4[3, 1] = "1";
            }
        }
        if (t5[3, 3] == "1")
        {
            if (t3[3, 3] == 1)
            {
                t4[3, 0] = "1";
            }
            else
            {
                t4[3, 0] = "0";
            }
        }
        else
        {
            if (t3[3, 3] == 1)
            {
                t4[3, 0] = "0";
            }
            else
            {
                t4[3, 0] = "1";
            }
        }

        encry = string.Concat(t4[0, 0], t4[0, 1], t4[0, 2], t4[0, 3], t4[1, 0], t4[1, 1], t4[1, 2], t4[1, 3], t4[2, 0], t4[2, 1], t4[2, 2], t4[2, 3], t4[3, 0], t4[3, 1], t4[3, 2], t4[3, 3]);
        top[0].text = encry;

        // Initial logging
        Debug.LogFormat("[Binary Cipher #{0}] Page 1, top screen: {1}", ModuleId, encry);
        Debug.LogFormat("[Binary Cipher #{0}] Page 1, bottom screen: {1}", ModuleId, selectkeyword);
        Debug.LogFormat("[Binary Cipher #{0}] Page 2, top screen: {1}", ModuleId, selectletter);
        Debug.LogFormat("[Binary Cipher #{0}] Page 2, middle screen: {1}.", ModuleId, new[] { b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16 }.Join(""));

        // Logging for Step 1
        Debug.LogFormat("[Binary Cipher #{0}] Step 1: Axial Symmetry Transposition.", ModuleId);
        string[] grids = new string[5] { "", "", "", "", "" };
        for (int x = 0; x < 4; x++)
        {
            for (int y = 0; y < 4; y++)
            {
                grids[0] += t1[x, y];
                grids[1] += t2[x, y];
                grids[2] += t3[x, y];
                grids[3] += t4[x, y];
                grids[4] += t5[x, y];
            }
        }
        for (int i = 0; i < grids.Length; i++)
        {
            Debug.LogFormat("[Binary Cipher #{0}] Grid {1}:", ModuleId, i + 1);
            for (int j = 0; j < 4; j++)
                Debug.LogFormat("[Binary Cipher #{0}] {1}", ModuleId, grids[i].Substring(j * 4, 4));
        }
        // Logging for Step 2
        Debug.LogFormat("[Binary Cipher #{0}] Step 2: Alphabet Transposition.", ModuleId);
        Debug.LogFormat("[Binary Cipher #{0}] Keyword is {1}.", ModuleId, selectkeyword);
        Debug.LogFormat("[Binary Cipher #{0}] The 4 by 4 matrix should be:", ModuleId);
        string matrix = "";
        for (int x = 0; x < 4; x++)
            for (int y = 0; y < 4; y++)
                matrix += Tableletter[x, y];
        for (int i = 0; i < 4; i++)
            Debug.LogFormat("[Binary Cipher #{0}] {1}", ModuleId, matrix.Substring(i * 4, 4));
        Debug.LogFormat("[Binary Cipher #{0}] Using selected letter: {1}", ModuleId, selectletter);
        string[] beforeShift = new string[3] { "XX--------X-XX-X", "X---X---X---XXX-", "X--X-X----X-X--X" };
        string[] afterShiftUp = new string[3] { "------X-XX-XXX--", "X---X---XXX-X---", "-X----X-X--XX--X" };
        string[] afterShiftDown = new string[3] { "XX-XXX--------X-", "XXX-X---X---X---", "X--XX--X-X----X-" };
        Debug.LogFormat("[Binary Cipher #{0}] Table {1}, before shift:", ModuleId, selectletter);
        for (int i = 0; i < 4; i++)
            Debug.LogFormat("[Binary Cipher #{0}] {1}", ModuleId, beforeShift["ABC".IndexOf(selectletter)].Substring(i * 4, 4));
        Debug.LogFormat("[Binary Cipher #{0}] Letter found at position 6 is {1}.", ModuleId, Tableletter[1, 1]);
        Debug.LogFormat("[Binary Cipher #{0}] Table {1}, after shift:", ModuleId, selectletter);
        for (int i = 0; i < 4; i++)
            Debug.LogFormat("[Binary Cipher #{0}] {1}", ModuleId, "ABCDEFGHIJKLZ".Contains(Tableletter[1, 1]) ? afterShiftDown["ABC".IndexOf(selectletter)].Substring(i * 4, 4) : afterShiftUp["ABC".IndexOf(selectletter)].Substring(i * 4, 4));
        Debug.LogFormat("[Binary Cipher #{0}] Retrieved binary is {1}.", ModuleId, answerAfterInsert);

        // Logging for Step 3
        Debug.LogFormat("[Binary Cipher #{0}] Step 3: ASCII Translation.", ModuleId);
        Debug.LogFormat("[Binary Cipher #{0}] Remove digit {1} from retrieved binary to get {2}.", ModuleId, (Bomb.GetBatteryCount() % 6) + 1, answerBeforeInsert);
        Debug.LogFormat("[Binary Cipher #{0}] Answer: {1}.", ModuleId, answer5);
    }

#pragma warning disable 414
    private readonly string TwitchHelpMessage = @"!{0} press <letter> to press that letter. | !{0} press left/right to press left or right. | 'press' is optional.";
#pragma warning restore 414

    IEnumerator ProcessTwitchCommand(string command)
    {
        var m = Regex.Match(command, @"^\s*(press\s+)?left\s*$", RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);
        if (m.Success)
        {
            yield return null;
            ArrowSels[0].OnInteract();
            yield break;
        }
        m = Regex.Match(command, @"^\s*(press\s+)?right\s*$", RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);
        if (m.Success)
        {
            yield return null;
            ArrowSels[1].OnInteract();
            yield break;
        }
        m = Regex.Match(command, @"^\s*(press\s+)?([A-Z])\s*$", RegexOptions.IgnoreCase | RegexOptions.CultureInvariant);
        if (!m.Success)
            yield break;
        yield return null;
        KeyboardSels["ABCDEFGHIJKLMNOPQRSTUVWXYZ".IndexOf(m.Groups[2].Value.ToUpperInvariant())].OnInteract();
    }

    IEnumerator TwitchHandleForcedSolve()
    {
        yield return null;
        KeyboardSels["ABCDEFGHIJKLMNOPQRSTUVWXYZ".IndexOf(answer5.ToUpperInvariant())].OnInteract();
        yield break;
    }
}
